//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Juno.EnvironmentSelection.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Juno.EnvironmentSelection.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Filter on bios version of node. Takes in the bios versions to filter on and return the cluster
        ///// node id and bios version. This query is very similar to the OS Build query.
        ///let includeBiosVersion = dynamic([$includeBiosVersion$]);
        ///let excludeBiosVersion = dynamic([$excludeBiosVersion$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmIn [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BiosFilterQuery {
            get {
                return ResourceManager.GetString("BiosFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let beginTime = ago(1h);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let unallocableNodes = cluster(&apos;Azurecm&apos;).database(&apos;AzureCM&apos;).TMMgmtNodeEventsEtwTable
        ///| where PreciseTimeStamp &gt; beginTime
        ///// Do not want to include nodes that are in recovery mode.
        ///| where Message startswith &quot;Setting TimeUntilNodeRecoveryToBeBlocked&quot;
        ///| extend endTime = todatetime(extract(&quot;(\\d{2}\\/\\d{2}\\/\\d{4} \\d{1,2}\\:\\d{2}\\:\\d{2} [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BlockedNodesFilterQuery {
            get {
                return ResourceManager.GetString("BlockedNodesFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Filter on Cluster Sku.
        ///let excludeClusterSku = $excludeClusterSku$;
        ///let includeClusterSku = $includeClusterSku$;
        ///let includeRegion = $includeRegion$;
        ///let excludeRegion = $excludeRegion$;
        ///cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryGenerationMappingV3
        ///| where IsLive == true
        ///| extend ClusterId = tolower(ClusterId)
        ///| where ClusterId contains &quot;prd&quot;
        ///| extend ClusterSku = tolower(substring(tostring(split(ClusterId, &apos;prd&apos;)[1]), 0, 3))
        ///| extend ClusterSku = case( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ClusterSkuFilterQuery {
            get {
                return ResourceManager.GetString("ClusterSkuFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let includeCpuDescription = $includeCpuDescription$;
        ///let excludeCpuDescription = $excludeCpuDescription$;
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let eligibleNodes = cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryComponentCPU
        ///| summarize arg_max(DataCollectedOn, *) by NodeId
        ///| distinct Description, NodeId
        ///| where iff(isnotempty(includeCpuDescription), tolower(Descriptio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CpuDescriptionQuery {
            get {
                return ResourceManager.GetString("CpuDescriptionQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let includeCpuId = dynamic([$includeCpuId$]);
        ///let excludeCpuId = dynamic([$excludeCpuId$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let eligibleNodes = cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryComponentCPU
        ///| summarize arg_max(DataCollectedOn, *) by NodeId
        ///| extend CPUID=strcat(tolower(tohex(CPUIDExtModel)),tolower(tohex(CPUIDExtFamily)), tolower(tohex(CPUIDFamily)) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CpuIdFilterQuery {
            get {
                return ResourceManager.GetString("CpuIdFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let includeRegion = $includeRegion$;
        ///let excludeRegion = $excludeRegion$;
        ///cluster(&apos;Azurecm&apos;).database(&apos;AzureCM&apos;).AllocatorAllocationResult
        ///| where TIMESTAMP &gt; ago(3d)
        ///| join kind=inner hint.strategy=broadcast (
        ///        cluster(&apos;cirrus.kusto.windows.net&apos;).database(&apos;cirrus&apos;).Region
        ///        | where (RegionName in~ (includeRegion) and RegionName !in~ (excludeRegion))  
        ///        | distinct RegionName, FabricRegionName
        ///    ) on  $left.Region == $right.FabricRegionName
        ///| where allocationRequestType == &quot;New [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CrpEnablementQuery {
            get {
                return ResourceManager.GetString("CrpEnablementQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Filter on hardware sku id.
        ///let excludeHwSku = dynamic([$excludeHwSku$]);
        ///let includeHwSku = dynamic([$includeHwSku$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryGenerationMappingV3
        ///| where IsLive == true
        ///| extend ClusterId = tolower(ClusterId)
        ///| join kind=inner includeCluster on ClusterId
        ///| join kind=leftanti excludeClus [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HardwareSkuFilterQuery {
            get {
                return ResourceManager.GetString("HardwareSkuFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let beginTime = ago(2h);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let readyNodes = cluster(&apos;azurecm.kusto.windows.net&apos;).database(&apos;AzureCM&apos;).LogNodeSnapshot
        ///| where PreciseTimeStamp &gt; beginTime
        ///| summarize arg_max(PreciseTimeStamp, tipNodeSessionId, nodeAvailabilityState, nodeState, containerCount, ClusterId = tolower(Tenant)) by NodeId = nodeId
        ///| where nodeState == &quot;Ready&quot; and nodeAvailabilityState == &quot;Avail [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HealthyNodeQuery {
            get {
                return ResourceManager.GetString("HealthyNodeQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let includeRegion = $includeRegion$;
        ///let excludeRegion = $excludeRegion$;
        ///let includeCluster = $includeCluster$;
        ///let excludeCluster = $excludeCluster$;
        ///cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryGenerationMappingV3
        ///| extend ClusterId = tolower(ClusterId)
        ///| where ClusterId in~ (includeCluster) and ClusterId !in~ (excludeCluster)
        ///| distinct ClusterId, RegionId
        ///| join kind = inner (
        ///    cluster(&apos;cirrus.kusto.windows.net&apos;).database(&apos;cirrus&apos;).Region
        ///    | where  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KnownClusterQuery {
            get {
                return ResourceManager.GetString("KnownClusterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Filters on the microcode of the node. Takes in the microcode filters and return the cluster id, node id, 
        ///// and microcode
        ///let includeMicrocode = dynamic([$includeMicrocode$]);
        ///let excludeMicrocode = dynamic([$excludeMicrocode$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let microcodeTable = cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryComponentCPUMicrocode
        ///| where  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MicrocodeFilterQuery {
            get {
                return ResourceManager.GetString("MicrocodeFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // takes in the filters for the OS build and returns the cluster id node id,
        ///// and the OS Build. This is very similar to the BIOS query. 
        ///let includeOsBuildUbr = dynamic([$includeOSBuild$]);
        ///let excludeOsBuildUbr = dynamic([$excludeOSBuild$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryGenerationMappingV3
        ///| where IsLive == tr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OSBuildFilterQuery {
            get {
                return ResourceManager.GetString("OSBuildFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let beginTime = ago(2d);
        ///let includeFirmwares = dynamic([$includeFirmware$]);
        ///let excludeFirmwares = dynamic([$excludeFirmware$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///cluster(&apos;overlakedata.southcentralus&apos;).database(&quot;overlake-syslog&quot;).OverlakeHealthStoreTable
        ///| where TIMESTAMP &gt; beginTime and Name == &quot;CerberusVer&quot;
        ///| summarize arg_max(TIMESTAMP, Value) by NodeId
        ///| where Value in~ (includeFirmwares) and  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SoCCerberusQuery {
            get {
                return ResourceManager.GetString("SoCCerberusQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let beginTime = ago(2d);
        ///let includeFirmwares = dynamic([$includeFirmware$]);
        ///let excludeFirmwares = dynamic([$excludeFirmware$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///cluster(&apos;overlakedata.southcentralus&apos;).database(&quot;overlake-syslog&quot;).OverlakeHealthStoreTable
        ///| where TIMESTAMP &gt; beginTime and Name == &quot;SoCFwVer&quot;
        ///| summarize arg_max(TIMESTAMP, Value) by NodeId, Name
        ///| where Value in~ (includeFirmwares) a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SoCFipQuery {
            get {
                return ResourceManager.GetString("SoCFipQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let beginTime = ago(2d);
        ///let includeFirmwares = dynamic([$includeFirmware$]);
        ///let excludeFirmwares = dynamic([$excludeFirmware$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///cluster(&apos;overlakedata.southcentralus&apos;).database(&quot;overlake-syslog&quot;).OverlakeHealthStoreTable
        ///| where TIMESTAMP &gt; beginTime and Name == &quot;SoCFwVer&quot;
        ///| summarize arg_max(TIMESTAMP, Value, Description) by NodeId, Name
        ///| where Description in~ ( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SoCNitroQuery {
            get {
                return ResourceManager.GetString("SoCNitroQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let includeFamily = $includeFamily$;
        ///let driveType = dynamic([$driveType$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let driveMapping = datatable(Literal:string, Boolean:bool)[&apos;System&apos;, 1, &apos;Data&apos;, 0];
        ///// Map the Family to a set of ModelNumbers
        ///let models = cluster(&apos;hqse.kusto.windows.net&apos;).database(&apos;hqsedb&apos;).DriveDecoder
        ///| where Family =~ includeFamily 
        ///| distinct DriveProductId, Family;
        ///let supportedNod [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SsdFilterQuery {
            get {
                return ResourceManager.GetString("SsdFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let includeFirmware = dynamic([$IncludeFirmware$]);
        ///let excludeFirmware = dynamic([$ExcludeFirmware$]);
        ///let driveType = dynamic([$DriveType$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let driveMapping =datatable(Literal:string, Boolean:bool)[&apos;System&apos;, 1, &apos;Data&apos;, 0];
        ///let supportedNodes = cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryComponentDisk
        ///// Interesting that som [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SsdFirmwareQuery {
            get {
                return ResourceManager.GetString("SsdFirmwareQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let includeModelNumber = dynamic([$IncludeModel$]);
        ///let excludeModelNumber = dynamic([$ExcludeModel$]);
        ///let driveType = dynamic([$DriveType$]);
        ///let includeCluster = datatable(ClusterId:string)[$includeCluster$];
        ///let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
        ///let driveMapping =datatable(Literal:string, Boolean:bool)[&apos;System&apos;, 1, &apos;Data&apos;, 0];
        ///let supportedNodes = cluster(&apos;azuredcmkpi.westus2.kusto.windows.net&apos;).database(&apos;AzureDCMDb&apos;).dcmInventoryComponentDisk
        ///| where DriveProductId  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SsdModelNumberQuery {
            get {
                return ResourceManager.GetString("SsdModelNumberQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let settingsBeginTime = ago(4h);
        ///let snapshotBeginTime = ago(2h);
        ///let includeRegion = $includeRegion$;
        ///let excludeRegion = $excludeRegion$;
        ///let tipSessionsRequired = $tipSessionsRequired$;
        ///// Materialize commonly used table for searching for Fabric settings.
        ///let _azurecm_ETW = materialize (cluster(&apos;azurecm.kusto.windows.net&apos;).database(&apos;AzureCM&apos;).TMMgmtFabricSettingEtwTable
        ///    | where PreciseTimeStamp &gt;= settingsBeginTime
        ///    | extend ClusterId = tolower(Tenant)
        ///    // Make sure to only materialize [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TipClusterQuery {
            get {
                return ResourceManager.GetString("TipClusterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // VmSku filter query. First translates the External VMSku name to the internal name 
        ///// and then checks for the allocable VM count on the nodes. 
        ///let beginTime = ago(2h);
        ///let excludeVmSku = $excludeVmSku$;
        ///let includeVmSku = $includeVmSku$;
        ///let includeRegion = $includeRegion$;
        ///let excludeRegion = $excludeRegion$;
        ///let allocableVmCount = $allocableVmCount$;
        ///let internalVmSkus=
        ///    cluster(&apos;cirrus.kusto.windows.net&apos;).database(&apos;cirrus&apos;).VMSKU
        ///    | distinct FabricVMSkuName, VMSKUName
        ///    | project V [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VMSkuFilterQuery {
            get {
                return ResourceManager.GetString("VMSkuFilterQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to let experimentNames = $experimentName$;
        ///let cpuIds = $cpuId$;
        ///let includeRegions = $includeRegion$;
        ///let excludeRegions = $excludeRegion$;
        ///let dateRangeBegin = ago(60d);
        ///let dateRangeEnd = now();
        ///let environments = dynamic([&apos;juno-prod01&apos;]);
        ///let clusterTypes = dynamic([&quot;Compute&quot;, &quot;GPC&quot;, &quot;GPZ&quot;, &quot;HPC&quot;]);
        ///let getCpuId = (extModel : int, extFamily : int, family : int, model : int, steppingId : int) {
        ///    strcat(
        ///        tolower(tohex(extModel)),
        ///        tolower(tohex(extFamily)), 
        ///        tolower(tohe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ZeroExecutionClusterSelectionQuery {
            get {
                return ResourceManager.GetString("ZeroExecutionClusterSelectionQuery", resourceCulture);
            }
        }
    }
}
