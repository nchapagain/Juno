let includeModelNumber = dynamic([$IncludeModel$]);
let excludeModelNumber = dynamic([$ExcludeModel$]);
let driveType = dynamic([$DriveType$]);
let includeCluster = datatable(ClusterId:string)[$includeCluster$];
let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
let driveMapping =datatable(Literal:string, Boolean:bool)['System', 1, 'Data', 0];
let supportedNodes = cluster('azuredcmkpi.westus2.kusto.windows.net').database('AzureDCMDb').dcmInventoryComponentDisk
| where DriveProductId in~ (includeModelNumber) and DriveProductId !in~ (excludeModelNumber)
| where DriveProductId != "n/a"
| extend ClusterId = tolower(ClusterId)
| where ClusterId in~ (includeCluster) and ClusterId !in~ (excludeCluster)
| join kind=inner driveMapping on $left.SystemDrive == $right.Boolean // System Drive -> OS or Data attribute.
| extend SystemDrive = Literal
| where SystemDrive in~ (driveType)
| distinct NodeId, DriveProductId, SystemDrive;
// Gather more context for environment candidate.
cluster('azuredcmkpi.westus2.kusto.windows.net').database('AzureDCMDb').dcmInventoryGenerationMappingV3
| where NodeId in~ (supportedNodes)
| join kind=inner supportedNodes on NodeId
| distinct ClusterId, RegionId, NodeId, RackLocation, DriveProductId, SystemDrive
| join kind=inner (
    cluster('cirrus.kusto.windows.net').database('cirrus').Region
    | distinct RegionName, FabricRegionName
) on $left.RegionId == $right.FabricRegionName
| summarize SsdDriveType=make_set(SystemDrive), SsdModel=make_set(DriveProductId) by ClusterId = tolower(ClusterId), Region = RegionName, NodeId, Rack = RackLocation
| extend SsdDriveType = translate('["]', '', tostring(array_sort_asc(driveType)))
| extend SsdModel = translate('["]', '', tostring(SsdModel))