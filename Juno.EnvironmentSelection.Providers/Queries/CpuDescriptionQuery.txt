let includeCpuDescription = $includeCpuDescription$;
let excludeCpuDescription = $excludeCpuDescription$;
let includeCluster = datatable(ClusterId:string)[$includeCluster$];
let excludeCluster = datatable(ClusterId:string)[$excludeCluster$];
let eligibleNodes = cluster('azuredcmkpi.westus2.kusto.windows.net').database('AzureDCMDb').dcmInventoryComponentCPU
| summarize arg_max(DataCollectedOn, *) by NodeId
| distinct Description, NodeId
| where iff(isnotempty(includeCpuDescription), tolower(Description) has tolower(includeCpuDescription), tolower(Description) !has tolower(excludeCpuDescription))
| distinct Description, NodeId;
cluster('azuredcmkpi.westus2.kusto.windows.net').database('AzureDCMDb').dcmInventoryGenerationMappingV3
| where IsLive == true
| extend ClusterId = tolower(ClusterId)
| join kind=inner includeCluster on ClusterId
| join kind=leftanti excludeCluster on ClusterId
| project ClusterId = tolower(ClusterId), NodeId, Rack = RackLocation, RegionId
| join kind = inner eligibleNodes on NodeId
| extend IncludeRootString = iff(isnotempty(includeCpuDescription), includeCpuDescription, "IncludeRootString")
| extend ExcludeRootString = iff(isnotempty(excludeCpuDescription), excludeCpuDescription, "ExcludeRootString")
| join kind=inner hint.strategy=broadcast (
        cluster('cirrus.kusto.windows.net').database('cirrus').Region
        | distinct RegionName, FabricRegionName
    ) on  $left.RegionId == $right.FabricRegionName
| extend Region = RegionName
| project ClusterId, NodeId, Rack, CpuDescription = Description, Region, IncludeRootString, ExcludeRootString
| distinct Region, Rack, ClusterId, CpuDescription, NodeId, IncludeRootString, ExcludeRootString
| take 500000;