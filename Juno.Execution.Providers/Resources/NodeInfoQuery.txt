let nodes = $nodesList$;
let vmSkus = $vmSkus$;
let beginTime = ago(4h);
// Step 1: get node's clusterId
let supportedSkus = cluster('cirrus.kusto.windows.net').database('cirrus').VMSKU
| distinct FabricVMSkuName, VMSKUName
| project VmSku = tolower(FabricVMSkuName), ExternalVMSKU = VMSKUName
| where (isempty(vmSkus) or ExternalVMSKU in~ (vmSkus)) 
| distinct VmSku, ExternalVMSKU
| join kind = inner
    (cluster('Azurecm').database('AzureCM').AllocableVmCount
    | where PreciseTimeStamp > beginTime and vmType != "IOwnMachine" and deploymentType == "NewDeployment" and partitionType == "Cluster"
    | summarize arg_max(PreciseTimeStamp, *) by partitionName, vmType
    | project ClusterId = tolower(partitionName), vmType=tolower(vmType)) on $left.VmSku == $right.vmType;
cluster('azurecm.kusto.windows.net').database('AzureCM').LogNodeSnapshot
| where TIMESTAMP > beginTime and tipNodeSessionId == "00000000-0000-0000-0000-000000000000" and nodeState == "Ready" and containerCount ==0 
| where nodes has nodeId
| distinct nodeId, Region
// Step 2: get the rack location and machine pool name
| join kind = inner cluster('azuredcmkpi.westus2.kusto.windows.net').database('AzureDCMDb').dcmInventoryGenerationMappingV3 on $left.nodeId == $right.NodeId
| summarize NodeList=make_list(nodeId) by RackLocation, MachinePool, ClusterId = tolower(ClusterId), Region
// Step 3: get external region names
| join kind=leftouter cluster('cirrus.kusto.windows.net').database('cirrus').Region on $left.Region == $right.FabricRegionName
| join kind = inner supportedSkus on ClusterId
| distinct ExternalVMSKU, MachinePool, RackLocation, RegionName, tostring(NodeList), ClusterId
| summarize make_list(ExternalVMSKU) by MachinePool, RackLocation, RegionName, tostring(NodeList), ClusterId