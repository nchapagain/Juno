namespace Juno.Execution.ArmIntegration.Parameters
{
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json.Serialization;

    /// <summary>
    /// Encapsulate virtual machine template parameters.
    /// Some of those parameters will be defined by user in the experiment definitions and others will be generated by Juno System.
    /// https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/2019-07-01/virtualmachines
    /// </summary>
    [JsonObject(NamingStrategyType = typeof(CamelCaseNamingStrategy))]
    public class VmTemplateParameters : TemplateParameters
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VmTemplateParameters"/> class.
        /// </summary>
        /// <param name="location">Location aka. region</param>
        /// <param name="osDiskStorageAccountType">Specifies the storage account type for the os disk. 
        /// Possible values are - Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS</param>
        /// <param name="virtualMachineSize">Sizes for Windows virtual machines in Azure</param>
        /// <param name="imageReference">Specifies information about the image to use.</param>
        /// <param name="virtualMachineName">Virtual machine name</param>
        /// <param name="subnetName">Subnet name</param>
        /// <param name="networkSecurityGroupName">Network security group name</param>
        /// <param name="virtualNetworkName">Virtual network name</param>
        /// <param name="adminUsername">Admin user name</param>
        /// <param name="adminCredentialSecret">Admin password/sshKey key vault reference</param>
        /// <param name="tipSessionid">Tip session id</param>
        /// <param name="clusterId">Cluster id</param>
        /// <param name="dataDisk">Data disks</param>
        /// <param name="enableAcceleratedNetworking">Should the VM use accelerated networking</param>
        /// <param name="privateIPAddress">Private IP address of the VM.</param>
        public VmTemplateParameters(
            ParameterValue<string> location,
            ParameterValue<string> osDiskStorageAccountType,
            ParameterValue<string> virtualMachineSize,
            ParameterValue<JObject> imageReference,
            ParameterValue<string> virtualMachineName,
            ParameterValue<string> subnetName,
            ParameterValue<string> networkSecurityGroupName,
            ParameterValue<string> virtualNetworkName,
            ParameterValue<string> privateIPAddress,
            ParameterValue<string> adminUsername,
            KeyVaultSecretReference adminCredentialSecret,
            ParameterValue<string> tipSessionid = null,
            ParameterValue<string> clusterId = null,
            ParameterValue<IList<VmDisk>> dataDisk = null,
            ParameterValue<bool> enableAcceleratedNetworking = null)
           : base(location)
        {
            this.OsDiskStorageAccountType = osDiskStorageAccountType;
            this.VirtualMachineSize = virtualMachineSize;
            this.ImageReference = imageReference;

            this.SubnetName = subnetName;
            this.VirtualMachineName = virtualMachineName;
            this.NetworkSecurityGroupName = networkSecurityGroupName;
            this.VirtualNetworkName = virtualNetworkName;
            this.PrivateIPAddress = privateIPAddress;
            this.AdminUserName = adminUsername;

            this.AdminCredentialSecretReference = adminCredentialSecret;

            // Conditionally deploy a resource in an Azure Resource Manager template if the parameters exist or not.
            // In this case we don't want to create disk resources if dataDisks is null or empty. Similarly we don't want to
            // pin availabilities set to cluster if tip session and cluster information is not present.
            // Unfortunately ARM template validation doesn't work well when parameters are null, 
            // that's why we are doing workaround during initialization in here and in the template files as well.
            // https://docs.microsoft.com/en-us/azure/architecture/building-blocks/extending-templates/conditional-deploy
            this.TipSessionId = tipSessionid == null || string.IsNullOrEmpty(tipSessionid.Value) ? new ParameterValue<string>(string.Empty) : tipSessionid;
            this.ClusterId = clusterId == null || string.IsNullOrEmpty(clusterId.Value) ? new ParameterValue<string>(string.Empty) : clusterId;
            this.DataDiskResources = dataDisk?.Value == null ? new ParameterValue<IList<VmDisk>>(new List<VmDisk>()) : dataDisk;
            this.EnableAcceleratedNetworking = enableAcceleratedNetworking ?? new ParameterValue<bool>(false);
        }

        /// <summary>
        /// Get OS disk storage account type
        /// </summary>
        public ParameterValue<string> OsDiskStorageAccountType { get; private set; }

        /// <summary>
        /// Get virtual machine size
        /// Sizes for Windows virtual machines in Azure
        /// https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes?toc=%2Fazure%2Fvirtual-machines%2Fwindows%2Ftoc.json
        /// </summary>
        public ParameterValue<string> VirtualMachineSize { get; private set; }

        /// <summary>
        /// Get the image reference.
        /// https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/2019-07-01/virtualmachines#ImageReference
        /// </summary>
        public ParameterValue<JObject> ImageReference { get; private set; }

        /// <summary>
        /// Get virtual machine name
        /// </summary>
        public ParameterValue<string> VirtualMachineName { get; private set; }

        /// <summary>
        /// Get subnet name
        /// </summary>
        public ParameterValue<string> SubnetName { get; private set; }

        /// <summary>
        /// Get network security group
        /// </summary>
        public ParameterValue<string> NetworkSecurityGroupName { get; private set; }

        /// <summary>
        /// Get virtual network anem
        /// </summary>
        public ParameterValue<string> VirtualNetworkName { get; private set; }

        /// <summary>
        /// Get admin user name
        /// </summary>
        public ParameterValue<string> AdminUserName { get; private set; }

        /// <summary>
        /// Get tip session id
        /// </summary>
        public ParameterValue<string> TipSessionId { get; private set; }

        /// <summary>
        /// Get cluster id
        /// </summary>
        public ParameterValue<string> ClusterId { get; private set; }

        /// <summary>
        /// Get admin password/SSHKey key vault reference
        /// Instead of putting a secure value (like a password) directly in your template or parameter file,
        /// you can retrieve the value from an Azure Key Vault during a deployment. This is done by referencing the key vault and secret in parameter file.
        /// https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/key-vault-parameter?tabs=azure-cli#reference-a-secret-with-dynamic-id
        /// </summary>
        [JsonProperty(PropertyName = "adminCredentialSecret")]
        public KeyVaultSecretReference AdminCredentialSecretReference { get; private set; }

        /// <summary>
        /// Get the VM data disks
        /// </summary>
        public ParameterValue<IList<VmDisk>> DataDiskResources { get; private set; }

        /// <summary>
        /// Specifies if the VM should use accelerated networking
        /// </summary>
        public ParameterValue<bool> EnableAcceleratedNetworking { get; private set; }

        /// <summary>
        /// Private IP address of the network interface.
        /// </summary>
        public ParameterValue<string> PrivateIPAddress { get; private set; }
    }

    /// <summary>
    /// Encapsulate key vault refernce.
    /// https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/key-vault-parameter?tabs=azure-cli#reference-secrets-with-dynamic-id
    /// </summary>
    [JsonObject(NamingStrategyType = typeof(CamelCaseNamingStrategy))]
    public class KeyVaultSecretReference
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyVaultSecretReference"/> class.
        /// </summary>
        /// <param name="reference"></param>
        public KeyVaultSecretReference(KeyVaultReference reference)
        {
            this.Reference = reference;
        }

        /// <summary>
        /// Get key refernce <see cref="KeyVaultReference"/>
        /// </summary>
        public KeyVaultReference Reference { get; private set; }
    }

    /// <summary>
    /// Encapsulate key vault identification and secret name
    /// </summary>
    [JsonObject(NamingStrategyType = typeof(CamelCaseNamingStrategy))]
    public class KeyVaultReference
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyVaultReference"/> class.
        /// </summary>
        /// <param name="keyVault"></param>
        /// <param name="secretName"></param>
        public KeyVaultReference(KeyVaultIdentification keyVault, string secretName)
        {
            this.KeyVaultIdentification = keyVault;
            this.SecretName = secretName;
        }

        /// <summary>
        /// 
        /// </summary>
        [JsonProperty(PropertyName = "keyVault")]
        public KeyVaultIdentification KeyVaultIdentification { get; private set; }

        /// <summary>
        /// Get secret name
        /// </summary>
        public string SecretName { get; private set; }
    }

    /// <summary>
    /// Encapsulate key vault identification
    /// </summary>
    [JsonObject(NamingStrategyType = typeof(CamelCaseNamingStrategy))]
    public class KeyVaultIdentification
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyVaultIdentification"/> class.
        /// </summary>
        /// <param name="id"></param>
        public KeyVaultIdentification(string id)
        {
            this.Id = id;
        }

        /// <summary>
        /// Get key vault secret Id. Relative key vault resource uri
        /// "id": "/subscriptions/subscription-id/resourceGroups/rg-name/providers/Microsoft.KeyVault/vaults/vault-name"
        /// </summary>
        public string Id { get; private set; }
    }
}